{"version":3,"sources":["icons/dog.svg","icons/bone.svg","icons/rotten_meat.svg","components/Dog.js","components/Bone.js","components/Grid.js","components/Header.js","components/Score.js","Reducer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dog","direction","className","src","DogSVG","alt","Bone","props","isRotten","RottenMeatSVG","BoneSVG","Grid","gridList","dogDirection","map","row","index","key","element","Header","Score","score","text","reducer","state","action","type","col","value","copiedGridList","currentDogPosition","dogRow","dogCol","updatedDogRow","updatedDogCol","updatedDogDirection","generateRandomPosition","boneRow","boneCol","speed","console","log","isGameOver","grid","randomRow","Math","floor","random","randomCol","App","timer","useRef","useState","bestScore","setBestScore","Array","fill","i","length","useReducer","dispatch","useEffect","storedScore","localStorage","getItem","Number","isNaN","rottenBoneRow","rottenBoneCol","document","addEventListener","handleKeyUp","removeEventListener","current","setInterval","clearInterval","setItem","event","N","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d3a705a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dog.ae075a90.svg\";","module.exports = __webpack_public_path__ + \"static/media/bone.7475f535.svg\";","module.exports = __webpack_public_path__ + \"static/media/rotten_meat.bc3d20ac.svg\";","import React from 'react'\nimport DogSVG from '../icons/dog.svg'\n\nconst Dog = ({direction}) => {\n    return <img className={`dog ${direction}`} src={DogSVG} alt=\"\" />\n}\n\nexport default Dog","import React from 'react'\nimport BoneSVG from '../icons/bone.svg'\nimport RottenMeatSVG from '../icons/rotten_meat.svg'\n\nconst Bone = (props) => {\n    const {isRotten = false} = props\n    if(isRotten === true) {\n        return <img className=\"bone rotten\" src={RottenMeatSVG} alt=\"\" />\n    }\n    return <img className=\"bone\" src={BoneSVG} alt=\"\" />\n}\n\nexport default Bone","import React from 'react'\n\nimport Dog from './Dog'\nimport Bone from './Bone'\n\n\nconst Grid = (props) => {\n    const {gridList, dogDirection} = props\n    return (\n        <section className=\"grid-container\">\n            {gridList.map((row, index) => {\n                return (\n                    <section className=\"row\" key={index}>\n                        {row.map((element, index) => {\n                            if(element === 'D') {\n                                return (<div className=\"grid-element\" key={index}>\n                                    <Dog direction={dogDirection} />\n                                    </div>)\n                            }\n                            if(element === 'B') {\n                                return <div className=\"grid-element\" key={index}><Bone isRotten={false}/></div>\n                            }\n                            if(element === 'R') {\n                                return <div className=\"grid-element\" key={index}><Bone isRotten/></div>\n                            }\n                            return <span className=\"grid-element\" key={index}></span>\n                        })}\n                    </section>\n                )\n            })}\n        </section>\n    )\n}\n\nexport default Grid","import React from 'react'\n\nconst Header = () => (\n    <section className=\"header\">\n        <h1>Alex the Hungry Dog</h1>\n    </section>\n)\n\nexport default Header","import React from 'react'\n\nconst Score = ({score, text}) => {\n    return <section className=\"score-container\"><p>{text}</p><span className=\"score\">{score}</span></section>\n}\n\nexport default Score","export default function reducer(state, action) {\n    switch (action.type) {\n        case 'add_position': {\n            const {row, col, value} = action\n            const copiedGridList = [...state.gridList]\n            copiedGridList[row][col] = value\n            return {...state, gridList: copiedGridList}\n        }\n\n        case 'update_dog_position': {\n            const {dogDirection} = state\n            const [dogRow, dogCol] = state.currentDogPosition\n            let updatedDogRow = dogRow, updatedDogCol = dogCol, updatedDogDirection = dogDirection\n            switch (dogDirection) {\n                case 'up':\n                    updatedDogRow -= 1\n                    if(updatedDogRow < 0) {\n                        updatedDogDirection = 'down'\n                        updatedDogRow = 0\n                    }\n                    break;\n            \n                case 'down':\n                    updatedDogRow += 1\n                    if(updatedDogRow >= 8) {\n                        updatedDogDirection = 'up'\n                        updatedDogRow = 7\n                    }\n                    break;\n\n                case 'left':\n                    updatedDogCol -= 1\n                    if(updatedDogCol < 0) {\n                        updatedDogDirection = 'right'\n                        updatedDogCol = 0\n                    }\n                    break;\n\n                case 'right':\n                    updatedDogCol += 1\n                    if(updatedDogCol >= 8) {\n                        updatedDogDirection = 'left'\n                        updatedDogCol = 7\n                    }\n                    break;\n\n                default:\n                    break;\n            }\n            const copiedGridList = [...state.gridList]\n            copiedGridList[dogRow][dogCol] = 0\n\n            if(copiedGridList[updatedDogRow][updatedDogCol] === 'B') {\n                const {row: boneRow, col: boneCol}  = generateRandomPosition(copiedGridList)\n                copiedGridList[boneRow][boneCol] = 'B'\n                state.speed -= 200\n                state.score += 1\n                copiedGridList[updatedDogRow][updatedDogCol] = 'D'\n                return {\n                    ...state,\n                    score: state.score,\n                    speed: state.speed,\n                    gridList: copiedGridList,\n                    dogDirection: updatedDogDirection,\n                    currentDogPosition: [updatedDogRow, updatedDogCol]\n                }\n            }\n            if(copiedGridList[updatedDogRow][updatedDogCol] === 'R') {\n                console.log('Game Over !!!!!')\n                return {\n                    ...state,\n                    isGameOver: true,\n                    gridList: copiedGridList,\n                    dogDirection: updatedDogDirection,\n                    currentDogPosition: [updatedDogRow, updatedDogCol]\n                }\n            }\n            copiedGridList[updatedDogRow][updatedDogCol] = 'D'\n            return {\n                ...state,\n                gridList: copiedGridList,\n                dogDirection: updatedDogDirection,\n                currentDogPosition: [updatedDogRow, updatedDogCol]\n            }\n        }\n\n        case 'update_dog_direction': {\n            return {...state, dogDirection: action.direction,}\n        }\n        default:\n            return state\n    }\n}\n\nexport function generateRandomPosition(grid) {\n    // bone position randomly\n    let randomRow = Math.floor(Math.random() * 100) % 7\n    let randomCol = Math.floor(Math.random() * 100) % 7\n\n    while(randomRow >= 0 && randomRow < 8 && randomCol >=0 && randomCol < 8 && grid[randomRow][randomCol] !== 0) {\n        randomRow = Math.floor(Math.random() * 100) % 7\n        randomCol = Math.floor(Math.random() * 100) % 7\n    }\n    // bone position in non-empty cell\n    return {\n        row: randomRow,\n        col: randomCol\n    }\n}\n","import React, {useReducer, useEffect, useRef, useState} from 'react'\n\nimport './App.css';\nimport Grid from './components/Grid'\nimport Header from './components/Header'\nimport Score from './components/Score'\nimport reducer, {generateRandomPosition} from './Reducer'\n\nfunction App() {\n  let timer = useRef(null)\n  const [bestScore, setBestScore] = useState(0)\n  const N = 8\n    const gridList = new Array(N).fill(0)\n    for(let i=0; i<gridList.length; i++) {\n        gridList[i] = new Array(N).fill(0)\n    }\n    gridList[0][0] = 'D'\n    const [state, dispatch] = useReducer(reducer, {\n        gridList,\n        score: 0,\n        speed: 2000,\n        isGameOver: false,\n        dogDirection: 'down',\n        currentDogPosition: [0,0],\n    });\n\n    useEffect(() => {\n      const storedScore = localStorage.getItem('score')\n      // Retrieve best score from local storage\n      if(storedScore && Number.isNaN(Number(storedScore)) === false) {\n        setBestScore(storedScore)\n      }\n    }, [])\n\n    useEffect(() => {\n      const {row: boneRow, col: boneCol} = generateRandomPosition(state.gridList)\n      dispatch({ type: 'add_position', row: boneRow, col: boneCol, value: 'B' })\n      const {row: rottenBoneRow, col: rottenBoneCol} = generateRandomPosition(state.gridList)\n      dispatch({ type: 'add_position', row: rottenBoneRow, col: rottenBoneCol, value: 'R' })\n\n      document.addEventListener('keyup', handleKeyUp)\n      return () => document.removeEventListener('keyup', handleKeyUp)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state.gridList.length])\n\n  useEffect(() => {\n    if(state.isGameOver) return\n    timer.current = setInterval(() => {\n        dispatch({ type: 'update_dog_position' })\n    }, state.speed);\n\n    if(state.isGameOver) {\n        clearInterval(timer.current)\n        timer.current = null\n    }\n    return () => {\n        if(timer.current) clearInterval(timer.current)\n    }\n})\n\nuseEffect(() => {\n  if(state.isGameOver === true) {\n    const storedScore = localStorage.getItem('score')\n\n    if(storedScore === null) {\n      localStorage.setItem('score', state.score)\n      setBestScore(state.score)\n      return\n    }\n    if(Number.isNaN(Number(storedScore)) === false && storedScore < state.score) {\n      localStorage.setItem('score', state.score)\n      setBestScore(state.score)\n      return\n    }\n  }\n},[state.isGameOver, state.score])\n\nconst handleKeyUp = (event) => {\n    switch (event.key) {\n        case \"ArrowUp\":\n            dispatch({type: 'update_dog_direction', direction: 'up'})\n            break;\n        case \"ArrowDown\":\n            dispatch({type: 'update_dog_direction', direction: 'down'})\n            break;\n        case \"ArrowLeft\":\n            dispatch({type: 'update_dog_direction', direction: 'left'})\n            break;\n        case \"ArrowRight\":\n            dispatch({type: 'update_dog_direction', direction: 'right'})\n            break;\n\n        default:\n            break;\n    }\n}\n  return (\n    <div className=\"App\">\n      <Header />\n      <section className=\"scores\">\n        <Score score={state.score} text=\"Score\" />\n        <Score score={bestScore} text=\"Best\" />\n      </section>\n      <Grid N={8} gridList={state.gridList} dogDirection={state.dogDirection}/>\n      <article className=\"description\">\n        <p className=\"text\">This is the game about Alex, the hungry dog. Help Alex to find the bone in the garden.\n          But be aware of the rotten meat, if Alex eats the rotten meat, it would die, means Game Over!!!!\n        </p>\n        <p className=\"text\">\n          <span className=\"super-text\">How to Play:</span>\n          Please use the arrow keys on keyboard to move Alex around.\n        </p>\n      </article>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}